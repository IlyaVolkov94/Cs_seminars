// Задача 32: Напишите программу замена элементов массива: положительные элементы замените на соответствующие отрицательные, и наоборот.
// [-4, -8, 8, 2] -> [4, 8, -8, -2]

//Основная программа: Старт
Console.WriteLine("Введите размер массива");    //Приглашение ко вводу
int Size = Convert.ToInt32(Console.ReadLine()); //Пользователь вводит размероность массива
int[] BufArray = new int[Size]; //Создаем буферный массив
BufArray = RandomArray(Size);   //Заполняем буферный массив рандомным массивом. Обратите внимание переменная Size в этой строчке и переменная Size в n срочке - разные переменные. Одна принадлежить основной программе, другая обозначает вход функции.
PrintArray(BufArray); //Выводим буферный массив на печать
ChangeArrayVoid(BufArray); //Меняем знаки в элементах массива BufArray.
PrintArray(BufArray); //Опять выводим на печать BufArray, но в нем уже изменены знаки функцией в 10 строчке.
//Теперь вернем BufArray в первоначальный вид вновь изменив знаки элементов, но уже функцией int[] ChangeArray(int[] Array)
BufArray = ChangeArray(BufArray); //Функция принимает массив BufArray на вход, меняем ему знаки и возвращает в нашу основную программу и перезаписывает массив BufArray с новыми знаками. Практически тоже самое что и на 10 строке, но более наглядно.
PrintArray(BufArray);
//Основная программа: Стоп

// int[] - говорит о том, что функция возвращает массив с целочисленными значениями, (int Size)- функция принимает целочисленное значение.
int[] RandomArray(int Size) //Функция возвращает массив заполненный рандомными числами от -9 до 9 включительно
{
    int[] Array = new int[Size];  //Создаем целочисленный массив размерностью Size
    for (int i = 0; i < Size; i++)  //Цикл для того, что бы пробежаться по элементам массива
        Array[i] = new Random().Next(-9, 10); //Записывает в элемент массива рандомное число от -9 до 9 включительно
        return Array; //Возвращаем полученный массив.
}

// void - функция в основную программу ничего не возвращает, (int[] Array) - функция на вход принимает массив.
void PrintArray(int[] Array) //Функция для печати массива в консоле.
{
    for (int i = 0; i < Array.Length; i++) //Пробегаемся по элементам массива. Обратите внимание Array.Length - возвращаем длину массива принятого на вход.
    {
        Console.Write(Array[i]+" "); //Печаем элемент элемент массива в консоле.
    }
    Console.WriteLine(""); //Делаем отступ для наглядности, что бы ничего не слипалось. Обратите внимание массив в основную программу ничего не возвращает, по этому return не нужен.
}

void ChangeArrayVoid(int[] Array) //Функция изменяет массив который приняла на вход. Просто "по-тихому" редактирует его в памяти компьютера и ничего не возвращает в основную программу.
{                                 // В этой функции меняем знак элементов на противополжным.
    for (int i = 0; i < Array.Length; i++) //Смотреть выше.
    {
        Array[i]=-Array[i]; //Меняем знак на противоположный просто умножив элемент на -1. Эквивалентно: Array[i] = -1* Array[i];
    }
}

int[] ChangeArray(int[] Array) //Функция изменяет массив который приняла на вход и возвращает в основную программу. Что бы получить этот массив нужно положить его в какой-нибудь "буфферный" массив.
{                              //Функция по своему выполнению эквиталентна void ChangeArrayVoid(int[] Array), но работает более явно.
    for (int i = 0; i < Array.Length; i++)
    {
        Array[i]=-Array[i]; // Смотреть выше
    }
    return Array; //Смотреть выше
}